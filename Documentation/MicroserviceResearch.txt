-Currently script for games is loaded into the "Play" view from wwwroot folder in the web app
-GameInfo (which is the json being passed from each game microservice to the API gateway and then to the web app) contains the filepath for each games' javascript file
-Could host the javascript file from the game microservice and then pass the URL instead of the filepath
-Example: Snake is running on https://localhost:1948 so instead of returning ~/js/snake.js, we could return https://localhost:1948/js/snake.js
-This would need to be changed across each game microservice, the API gateway, and the Web App

Some Implications:
-Might need to enable the microservices to be able to host static files
-Using localhost may not work in production environment
-API gateway does not seem to be functional at this point so it needs to be working first
-Games might have some other dependencies other than just the single js file

-Files are unorganized and will need to be properly sifted through to find any misplaced files
-Possibly Using CORS to connect with the Gateway
-Possibly having a new fetching URL method instead of what was previously used if there is one. 

-If the WebApp calls API Gateway from a different origin ? Enable CORS in API Gateway.
-If API Gateway calls microservices ? No CORS needed (server-to-server).

Cors is not actively being used within the WebApp, which would go on the explain why it is unable to make certain API calls 

Last semester’s microservices documentation: https://docs.google.com/document/d/1614BGhXJ8EkGg9p286xH0KazdWtSf83aGFW192Is-DI/edit?tab=t.0